<?php

namespace Se7entech\Contractnew\Modules\Users\Controllers;

use Se7entech\Contractnew\Modules\Roles\Models\RolesModel;
use Se7entech\Contractnew\Modules\Zones\Models\ZonesModel;
use Se7entech\Contractnew\Modules\Users\Models\UserModel;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Session\Session;
use Rakit\Validation\Validator;
use Se7entech\Contractnew\Helpers\UniqueRule;
use Se7entech\Contractnew\Helpers\Mailer;
use \mikehaertl\pdftk\Pdf;

use PhpOffice\PhpWord\IOFactory;
use PhpOffice\PhpWord\Settings;

class UserController{
    public $data = array(
        'errors' => array(),
        'last_data' => array(),
        'current' => array(),
        'success' => null,
        'session' => array(),
        'roles' => array(),
        'zones' => array()
    );

    public function __construct(Session $session){
        global $base_url, $base_path;
        $this->base_url = $base_url;
        $this->base_path = $base_path;
        $this->session = $session;
        $this->session->set('access', $_SESSION['access']);
        $this->session->set('user', $_SESSION['user']);
        $this->session->set('email', $_SESSION['email']);
        $this->session->set('designation', $_SESSION['designation']);
        $this->session->set('zone_id', $_SESSION['zone_id']);
        $this->session->set('userid', $_SESSION['id']);
        $this->session->set('role', $_SESSION['role']);

        $this->data['users'] = $this->getUsers();
        foreach ($this->session->getFlashBag()->all() as $type => $messages) {
            if($type === 'last_data'){
                $this->data['last_data'] = $messages[0];
                continue;
            }
            if($type === 'current'){
                $this->data['current'] = $messages[0];
                continue;
            }
            foreach($messages as $message){
                array_push($this->data['session'], '<div class="alert alert-'.$type.' p-2" role="alert">'.$message.'</div>');
            }
        }
        $this->data['roles'] = RolesModel::getAll();
        $this->data['zones'] = ZonesModel::getAll();

    }
    public function index(){
        include __DIR__ . '/../index.php';
    }

    public function getById($params){
        $id = $params['id'];
        if($id){
            $record = UserModel::getById($id);
            if($record){
                $this->data['current'] = $record;
                include __DIR__ . '/../single.php';
            }else{
                $flashes = $this->session->getFlashBag();
                $flashes->add('warning', 'User id not found');

                header('location: ' . $this->base_url . '/modules/users/');
            }  
        }else{
            $flashes = $this->session->getFlashBag();
            $flashes->add('warning', 'Bad Request');
            header('location: ' . $this->base_url . '/modules/users/');
        }
    }
    
    public function postUser(){

        $request = Request::createFromGlobals();
        if($request->request->get('save')){
            $validation = $this->_validateData($request->request->all());

            if ($validation->fails()) {
                // handling errors
                $errors = $validation->errors();
                $this->data['errors'] = $errors;
                $messages = $errors->all('<span>:message</span>');
                $flashes = $this->session->getFlashBag();
                // add flash messages
                foreach($messages as $msg){
                    $flashes->add(
                        'danger',
                        $msg
                    );
                }
                $flashes->add('last_data', $request->request->all());
        
            }else{
                $digits = 4;
                $otp = rand(pow(10, $digits-1), pow(10, $digits)-1);
                $postData = $request->request->all();
                $postData['password'] = $otp;
                $postData['avatar'] = $this->base_url . '/uploads/avatars/default.png';

    
                if($_FILES['avatar']['size']){
                    $fullname=$_FILES['avatar']['name']; 
                    $name=explode('.',$fullname);
                    $ext=$name[1];
                    $date = date('m/d/Yh:i:sa', time());
                    $rand=rand(10000,99999);
                    $encname=$date.$rand;
                    $finalname=md5($encname).'.'.$ext;
                    $path = "/uploads/avatars/".$finalname;
                    $finalpath=$this->base_path . $path;
                    move_uploaded_file($_FILES["avatar"]["tmp_name"],$finalpath);

                    $postData['avatar'] = $this->base_url . $path;
                }

                $res = UserModel::postUser($postData);
                $flashes = $this->session->getFlashBag();
                if($res){
                    $this->data['success'] = true;
                    $flashes->add(
                        'success',
                        '<span>New User created</span>'
                    );
                    $user = $this->session->get('user');
                    $designation = $this->session->get('designation');

                    $content = file_get_contents(__DIR__ . '/../welcome-template.html');
                    $content = str_replace(array('%base_url%', '%username%', '%password%', '%agent_name%', '%smtp_user%', '%smtp_pass%'), array($this->base_url, $postData['email'], $otp, $user, $postData['smtp_user'], $postData['smtp_pass']), $content);
                    // TODO: send password to email. 
                    // $from, $fromName, $to, $toName, $subject, $content, $altContent
                    $from = 'no-reply@se7entech.net';
                    $fromName = 'Se7entech LLC';
                    $to = $postData['email'];
                    $toName = $postData['firstname'] . ' ' . $postData['lastname'];
                    $subject = 'Welcome to Se7entech!';
        
                    $mailer = new Mailer($from, $fromName, $to, $toName, $subject, $content, null, 'no-reply@se7entech.net', 'jvkD1ka?1');
                    $mailer->send();

                }else{
                    $this->data['success'] = false;
                    $flashes->add(
                        'warning',
                        '<span>Something happened with database</span>'
                    );
                }
            }

            header('location: ' . $this->base_url . '/modules/users/');
        }
    }

    public function updateUser($params){
        
        $request = Request::createFromGlobals();
        $id = $params['id'];
        $user = UserModel::getById($id);
        
        if($request->request->get('save')){
            $postData = $request->request->all();
            unset($postData['email']);
            $validation = $this->_validateDataToUpdate($postData);
            if ($validation->fails()) {
                // handling errors
                $errors = $validation->errors();
                $this->data['errors'] = $errors;
                $messages = $errors->all('<span>:message</span>');
                $flashes = $this->session->getFlashBag();
                // add flash messages
                foreach($messages as $msg){
                    $flashes->add(
                        'danger',
                        $msg
                    );
                }
                $flashes->add('current', $request->request->all());
            }else{
                $postData = $request->request->all();
                $postData['avatar'] = $user['avatar'];

                if($_FILES['avatar']['size']){
                    $fullname=$_FILES['avatar']['name']; 
                    $name=explode('.',$fullname);
                    $ext=$name[1];
                    $date = date('m/d/Yh:i:sa', time());
                    $rand=rand(10000,99999);
                    $encname=$date.$rand;
                    $finalname=md5($encname).'.'.$ext;
                    $path = "/uploads/avatars/".$finalname;
                    $finalpath=$this->base_path . $path;
                    move_uploaded_file($_FILES["avatar"]["tmp_name"],$finalpath);

                    $postData['avatar'] = $this->base_url . $path;
                }

                $res = UserModel::update($id, $postData);
                $flashes = $this->session->getFlashBag();
                if($res){
                    $this->data['success'] = true;
                    $flashes->add(
                        'success',
                        '<span>User updated</span>'
                    );
                }else{
                    $this->data['success'] = false;
                    $flashes->add(
                        'warning',
                        '<span>Something happened with database</span>'
                    );
                }
            }

            header('location: ' . $this->base_url . '/modules/users/index.php/' . $id);
        } 
    }

    public function getUsers(){
        return UserModel::getAll();
    }

    public function delete($params){
        $request = Request::createFromGlobals();
        $id = $request->request->get('id');
        if($id){
            // $flashes = $this->session->getFlashBag();
            // // add flash messages
            // $flashes->add(
            //     'success',
            //     'Record successfully deleted'
            // );
            echo json_encode(array('success' => UserModel::delete($id)));
        }
    }

    private function _validateData($data){
        require __DIR__ . '/../../../../config/connection.php';
        $validator = new Validator;
        $validator->addValidator('unique', new UniqueRule($con));

        $validation = $validator->make($data, [
            'firstname' => 'required|min:3',
            'lastname' => 'required|min:3',
            'email' => 'required|min:3|email|unique:invoice_user,email',
            'phone' => 'required|min:1',
            'address' => 'required|min:1',
            'designation' => 'required|min:1',
            'role' => 'required',
            'zone_id' => 'required',
            'status' => 'required',
            
        ]);
        $validation->setAlias('firstname', 'First Name');
        $validation->setAlias('lastname', 'Last Name');
        $validation->setAlias('email', 'Email');
        $validation->setAlias('phone', 'Phone');
        $validation->setAlias('address', 'Address');
        $validation->setAlias('designation', 'Designation');
        $validation->setAlias('role', 'Role');
        $validation->setAlias('zone_id', 'Zone');
        $validation->setAlias('status', 'isAdmin');
        
        $validation->validate();

        return $validation;
    }

    private function _validateDataToUpdate($data){
        require __DIR__ . '/../../../../config/connection.php';
        $validator = new Validator;
        $validator->addValidator('unique', new UniqueRule($con));

        $validation = $validator->make($data, [
            'firstname' => 'required|min:3',
            'lastname' => 'required|min:3',
            'phone' => 'required|min:1',
            'address' => 'required|min:1',
            'designation' => 'required|min:1',
            'role' => 'required',
            'status' => 'required',
            
        ]);
        $validation->setAlias('firstname', 'First Name');
        $validation->setAlias('lastname', 'Last Name');
        $validation->setAlias('email', 'Email');
        $validation->setAlias('phone', 'Phone');
        $validation->setAlias('address', 'Address');
        $validation->setAlias('designation', 'Designation');
        $validation->setAlias('role', 'Role');
        $validation->setAlias('zone_id', 'Zone');
        $validation->setAlias('status', 'isAdmin');
        
        $validation->validate();

        return $validation;
    }

    public function taxes(){
        $record = UserModel::getByIdWithTaxes($this->session->get('userid'));
        $this->data['current'] = $record;
        $date = date('m-d-Y');
        $res = UserModel::getOldestContract($this->session->get('userid'));
        if($res){
            $date = date('m-d-Y', strtotime($res['sign_date']));
        }
        $this->data['current']['calculated_date'] = $date;
        include __DIR__ . '/../tax-form.php';
    }

    public function updateDownloadTax(){
        $user_id = $_POST['user_id'];
        if($user_id){
            $user = UserModel::getById($user_id);
            if($user){
                $data = array(
                    'user_id' => $user_id, 
                    'payer_info' => isset($_POST['payer_info']) ? $_POST['payer_info'] : '' , 
                    'payer_tin' => isset($_POST['payer_tin']) ? $_POST['payer_tin'] : '', 
                    'recipient_tin' => isset($_POST['recipient_tin']) ? $_POST['recipient_tin'] : '', 
                    'recipient_name' => isset($_POST['recipient_name']) ? $_POST['recipient_name'] : '', 
                    'street_address' => isset($_POST['street_address']) ? $_POST['street_address'] : '', 
                    'city_town' => isset($_POST['city_town']) ? $_POST['city_town'] : '', 
                    'account_number' => isset($_POST['account_number']) ? $_POST['account_number'] : '', 
                    '2nd_tin_not' => isset($_POST['2nd_tin_not']) ? 1:0, 
                    '1_rents' => isset($_POST['1_rents']) ? $_POST['1_rents'] : '', 
                    '2_royalties' => isset($_POST['2_royalties']) ? $_POST['2_royalties'] : '',
                    '3_other_income' => isset($_POST['3_other_income']) ? $_POST['3_other_income'] : '', 
                    '4_federal_income' =>isset( $_POST['4_federal_income']) ? $_POST['4_federal_income'] : '', 
                    '5_fishing_boat' => isset($_POST['5_fishing_boat']) ? $_POST['5_fishing_boat'] : '', 
                    '6_medical_health' => isset($_POST['6_medical_health']) ? $_POST['6_medical_health'] : '', 
                    '7_payer_direct' => isset($_POST['7_payer_direct']) ? 1:0, 
                    '8_substitute_payments' => isset($_POST['8_substitute_payments']) ? $_POST['8_substitute_payments'] : '', 
                    '9_crop_insurance' => isset($_POST['9_crop_insurance']) ? $_POST['9_crop_insurance'] : '', 
                    '10_gross_proceeds' => isset($_POST['10_gross_proceeds']) ? $_POST['10_gross_proceeds'] : '', 
                    '11_fish_purchased' => isset($_POST['11_fish_purchased']) ? $_POST['11_fish_purchased'] : '', 
                    '12_section_409a' =>isset( $_POST['12_section_409a']) ? $_POST['12_section_409a'] : '', 
                    '13_fatca_filing' => isset($_POST['13_fatca_filing']) ? 1:0, 
                    '14_excess_golden' => isset($_POST['14_excess_golden']) ? $_POST['14_excess_golden'] : '', 
                    '15_nonqualified_deferred' => isset($_POST['15_nonqualified_deferred']) ? $_POST['15_nonqualified_deferred'] : '', 
                    '16_state_tax' =>isset( $_POST['16_state_tax']) ? $_POST['16_state_tax'] : '', 
                    '16_state_tax_2' => isset($_POST['16_state_tax_2']) ? $_POST['16_state_tax_2'] : '', 
                    '17_state_payers_state' => isset($_POST['17_state_payers_state']) ? $_POST['17_state_payers_state'] : '', 
                    '17_state_payers_state_2' => isset($_POST['17_state_payers_state_2']) ? $_POST['17_state_payers_state_2'] : '', 
                    '18_state_income' => isset($_POST['18_state_income']) ? $_POST['18_state_income'] : '', 
                    '18_state_income_2' => isset($_POST['18_state_income_2']) ? $_POST['18_state_income_2'] : '' 
                );

                $updated = UserModel::updateTax($user_id, $data);
                $mapFields = array(
                    'topmostSubform[0].Copy1[0].Copy1Header[0].CalendarYear[0].f2_1[0]' => 'year',
                    'topmostSubform[0].Copy1[0].LeftColumn[0].f2_2[0]' => 'payer_info',
                    'topmostSubform[0].Copy1[0].LeftColumn[0].f2_3[0]' => 'payer_tin',
                    'topmostSubform[0].Copy1[0].LeftColumn[0].f2_4[0]' => 'recipient_tin',
                    'topmostSubform[0].Copy1[0].LeftColumn[0].f2_5[0]' => 'recipient_name',
                    'topmostSubform[0].Copy1[0].LeftColumn[0].f2_6[0]' => 'street_address',
                    'topmostSubform[0].Copy1[0].LeftColumn[0].f2_7[0]' => 'city_town',
                    'topmostSubform[0].Copy1[0].LeftColumn[0].f2_8[0]' => 'account_number',
                    'topmostSubform[0].Copy1[0].RightColumn[0].f2_9[0]' => '1_rents',
                    'topmostSubform[0].Copy1[0].RightColumn[0].f2_10[0]' => '2_royalties',
                    'topmostSubform[0].Copy1[0].RightColumn[0].f2_11[0]' => '3_other_income',
                    'topmostSubform[0].Copy1[0].RightColumn[0].f2_12[0]' => '4_federal_income',
                    'topmostSubform[0].Copy1[0].RightColumn[0].f2_13[0]' => '5_fishing_boat',
                    'topmostSubform[0].Copy1[0].RightColumn[0].f2_14[0]' => '6_medical_health',
                    'topmostSubform[0].Copy1[0].RightColumn[0].c2_4[0]' => '7_payer_direct',
                    'topmostSubform[0].Copy1[0].RightColumn[0].f2_15[0]' => '8_substitute_payments',
                    'topmostSubform[0].Copy1[0].RightColumn[0].f2_16[0]' => '9_crop_insurance',
                    'topmostSubform[0].Copy1[0].RightColumn[0].f2_17[0]' => '10_gross_proceeds',
                    'topmostSubform[0].Copy1[0].RightColumn[0].f2_18[0]' => '11_fish_purchased',
                    'topmostSubform[0].Copy1[0].RightColumn[0].f2_19[0]' => '12_section_409a',
                    'topmostSubform[0].Copy1[0].RightColumn[0].TagCorrectingSubform[0].c2_3[0]' => '13_fatca_filing', //on-off
                    'topmostSubform[0].Copy1[0].RightColumn[0].Box14_ReadOrder[0].f2_20[0]' => '14_excess_golden',
                    'topmostSubform[0].Copy1[0].RightColumn[0].f2_21[0]' => '15_nonqualified_deferred',
                    'topmostSubform[0].Copy1[0].Box16_ReadOrder[0].f2_22[0]' => '16_state_tax',
                    'topmostSubform[0].Copy1[0].Box16_ReadOrder[0].f2_23[0]' => '16_state_tax_2',
                    'topmostSubform[0].Copy1[0].Box17_ReadOrder[0].f2_24[0]' => '17_state_payers_state',
                    'topmostSubform[0].Copy1[0].Box17_ReadOrder[0].f2_25[0]' => '17_state_payers_state_2',
                    'topmostSubform[0].Copy1[0].f2_26[0]' => '18_state_income',
                    'topmostSubform[0].Copy1[0].f2_27[0]' => '18_state_income_2'
                );
                if($updated){
                    //download and redirect to /taxes/
                    $pathToPdfFile = __DIR__ . '/../f1099msc.pdf';
                    $pdf = new Pdf($pathToPdfFile, array(
                        // e.g. /project/pdftk/bin/pdftk
                        'command' => '/home/se7entechnet/public_html/adonis-form-test/src/bin/pdftk',
                        'procEnv' => array(
                            // e.g. /project/pdftk/bin (should contain libgcj.so.10)
                            'LD_LIBRARY_PATH' => '/home/se7entechnet/public_html/adonis-form-test/src/bin'
                        )
                    ));

                    $result = $pdf->fillForm([
                        'topmostSubform[0].Copy1[0].Copy1Header[0].CalendarYear[0].f2_1[0]' => '23', //year
                        'topmostSubform[0].Copy1[0].LeftColumn[0].f2_2[0]' => $updated['payer_info'],
                        'topmostSubform[0].Copy1[0].LeftColumn[0].f2_3[0]' => $updated['payer_tin'],
                        'topmostSubform[0].Copy1[0].LeftColumn[0].f2_4[0]' => $updated['recipient_tin'],
                        'topmostSubform[0].Copy1[0].LeftColumn[0].f2_5[0]' => $updated['recipient_name'],
                        'topmostSubform[0].Copy1[0].LeftColumn[0].f2_6[0]' => $updated['street_address'],
                        'topmostSubform[0].Copy1[0].LeftColumn[0].f2_7[0]' => $updated['city_town'],
                        'topmostSubform[0].Copy1[0].LeftColumn[0].f2_8[0]' => $updated['account_number'],
                        'topmostSubform[0].Copy1[0].RightColumn[0].f2_9[0]' => $updated['1_rents'],
                        'topmostSubform[0].Copy1[0].RightColumn[0].f2_10[0]' => $updated['2_royalties'],
                        'topmostSubform[0].Copy1[0].RightColumn[0].f2_11[0]' => $updated['3_other_income'],
                        'topmostSubform[0].Copy1[0].RightColumn[0].f2_12[0]' => $updated['4_federal_income'],
                        'topmostSubform[0].Copy1[0].RightColumn[0].f2_13[0]' => $updated['5_fishing_boat'],
                        'topmostSubform[0].Copy1[0].RightColumn[0].f2_14[0]' => $updated['6_medical_health'],
                        'topmostSubform[0].Copy1[0].RightColumn[0].c2_4[0]' => $updated['7_payer_direct'],
                        'topmostSubform[0].Copy1[0].RightColumn[0].f2_15[0]' => $updated['8_substitute_payments'],
                        'topmostSubform[0].Copy1[0].RightColumn[0].f2_16[0]' => $updated['9_crop_insurance'],
                        'topmostSubform[0].Copy1[0].RightColumn[0].f2_17[0]' => $updated['10_gross_proceeds'],
                        'topmostSubform[0].Copy1[0].RightColumn[0].f2_18[0]' => $updated['11_fish_purchased'],
                        'topmostSubform[0].Copy1[0].RightColumn[0].f2_19[0]' => $updated['12_section_409a'],
                        'topmostSubform[0].Copy1[0].RightColumn[0].TagCorrectingSubform[0].c2_3[0]' => $updated['13_fatca_filing'], //on-off
                        'topmostSubform[0].Copy1[0].RightColumn[0].Box14_ReadOrder[0].f2_20[0]' => $updated['14_excess_golden'],
                        'topmostSubform[0].Copy1[0].RightColumn[0].f2_21[0]' => $updated['15_nonqualified_deferred'],
                        'topmostSubform[0].Copy1[0].Box16_ReadOrder[0].f2_22[0]' => $updated['16_state_tax'],
                        'topmostSubform[0].Copy1[0].Box16_ReadOrder[0].f2_23[0]' => $updated['16_state_tax_2'],
                        'topmostSubform[0].Copy1[0].Box17_ReadOrder[0].f2_24[0]' => $updated['17_state_payers_state'],
                        'topmostSubform[0].Copy1[0].Box17_ReadOrder[0].f2_25[0]' => $updated['17_state_payers_state_2'],
                        'topmostSubform[0].Copy1[0].f2_26[0]' => $updated['18_state_income'],
                        'topmostSubform[0].Copy1[0].f2_27[0]' => $updated['18_state_income_2'],

                        'topmostSubform[0].CopyB[0].CopyBHeader[0].CalendarYear[0].f2_1[0]' => '23', //year
                        'topmostSubform[0].CopyB[0].LeftColumn[0].f2_2[0]' => $updated['payer_info'],
                        'topmostSubform[0].CopyB[0].LeftColumn[0].f2_3[0]' => $updated['payer_tin'],
                        'topmostSubform[0].CopyB[0].LeftColumn[0].f2_4[0]' => $updated['recipient_tin'],
                        'topmostSubform[0].CopyB[0].LeftColumn[0].f2_5[0]' => $updated['recipient_name'],
                        'topmostSubform[0].CopyB[0].LeftColumn[0].f2_6[0]' => $updated['street_address'],
                        'topmostSubform[0].CopyB[0].LeftColumn[0].f2_7[0]' => $updated['city_town'],
                        'topmostSubform[0].CopyB[0].LeftColumn[0].f2_8[0]' => $updated['account_number'],
                        'topmostSubform[0].CopyB[0].RightColumn[0].f2_9[0]' => $updated['1_rents'],
                        'topmostSubform[0].CopyB[0].RightColumn[0].f2_10[0]' => $updated['2_royalties'],
                        'topmostSubform[0].CopyB[0].RightColumn[0].f2_11[0]' => $updated['3_other_income'],
                        'topmostSubform[0].CopyB[0].RightColumn[0].f2_12[0]' => $updated['4_federal_income'],
                        'topmostSubform[0].CopyB[0].RightColumn[0].f2_13[0]' => $updated['5_fishing_boat'],
                        'topmostSubform[0].CopyB[0].RightColumn[0].f2_14[0]' => $updated['6_medical_health'],
                        'topmostSubform[0].CopyB[0].RightColumn[0].c2_4[0]' => $updated['7_payer_direct'],
                        'topmostSubform[0].CopyB[0].RightColumn[0].f2_15[0]' => $updated['8_substitute_payments'],
                        'topmostSubform[0].CopyB[0].RightColumn[0].f2_16[0]' => $updated['9_crop_insurance'],
                        'topmostSubform[0].CopyB[0].RightColumn[0].f2_17[0]' => $updated['10_gross_proceeds'],
                        'topmostSubform[0].CopyB[0].RightColumn[0].f2_18[0]' => $updated['11_fish_purchased'],
                        'topmostSubform[0].CopyB[0].RightColumn[0].f2_19[0]' => $updated['12_section_409a'],
                        'topmostSubform[0].CopyB[0].RightColumn[0].TagCorrectingSubform[0].c2_3[0]' => $updated['13_fatca_filing'], //on-off
                        'topmostSubform[0].CopyB[0].RightColumn[0].Box14_ReadOrder[0].f2_20[0]' => $updated['14_excess_golden'],
                        'topmostSubform[0].CopyB[0].RightColumn[0].f2_21[0]' => $updated['15_nonqualified_deferred'],
                        'topmostSubform[0].CopyB[0].Box16_ReadOrder[0].f2_22[0]' => $updated['16_state_tax'],
                        'topmostSubform[0].CopyB[0].Box16_ReadOrder[0].f2_23[0]' => $updated['16_state_tax_2'],
                        'topmostSubform[0].CopyB[0].Box17_ReadOrder[0].f2_24[0]' => $updated['17_state_payers_state'],
                        'topmostSubform[0].CopyB[0].Box17_ReadOrder[0].f2_25[0]' => $updated['17_state_payers_state_2'],
                        'topmostSubform[0].CopyB[0].f2_26[0]' => $updated['18_state_income'],
                        'topmostSubform[0].CopyB[0].f2_27[0]' => $updated['18_state_income_2'],

                        'topmostSubform[0].Copy2[0].Copy2Header[0].CalendarYear[0].f2_1[0]' => '23', //year
                        'topmostSubform[0].Copy2[0].LeftColumn[0].f2_2[0]' => $updated['payer_info'],
                        'topmostSubform[0].Copy2[0].LeftColumn[0].f2_3[0]' => $updated['payer_tin'],
                        'topmostSubform[0].Copy2[0].LeftColumn[0].f2_4[0]' => $updated['recipient_tin'],
                        'topmostSubform[0].Copy2[0].LeftColumn[0].f2_5[0]' => $updated['recipient_name'],
                        'topmostSubform[0].Copy2[0].LeftColumn[0].f2_6[0]' => $updated['street_address'],
                        'topmostSubform[0].Copy2[0].LeftColumn[0].f2_7[0]' => $updated['city_town'],
                        'topmostSubform[0].Copy2[0].LeftColumn[0].f2_8[0]' => $updated['account_number'],
                        'topmostSubform[0].Copy2[0].RightColumn[0].f2_9[0]' => $updated['1_rents'],
                        'topmostSubform[0].Copy2[0].RightColumn[0].f2_10[0]' => $updated['2_royalties'],
                        'topmostSubform[0].Copy2[0].RightColumn[0].f2_11[0]' => $updated['3_other_income'],
                        'topmostSubform[0].Copy2[0].RightColumn[0].f2_12[0]' => $updated['4_federal_income'],
                        'topmostSubform[0].Copy2[0].RightColumn[0].f2_13[0]' => $updated['5_fishing_boat'],
                        'topmostSubform[0].Copy2[0].RightColumn[0].f2_14[0]' => $updated['6_medical_health'],
                        'topmostSubform[0].Copy2[0].RightColumn[0].c2_4[0]' => $updated['7_payer_direct'],
                        'topmostSubform[0].Copy2[0].RightColumn[0].f2_15[0]' => $updated['8_substitute_payments'],
                        'topmostSubform[0].Copy2[0].RightColumn[0].f2_16[0]' => $updated['9_crop_insurance'],
                        'topmostSubform[0].Copy2[0].RightColumn[0].f2_17[0]' => $updated['10_gross_proceeds'],
                        'topmostSubform[0].Copy2[0].RightColumn[0].f2_18[0]' => $updated['11_fish_purchased'],
                        'topmostSubform[0].Copy2[0].RightColumn[0].f2_19[0]' => $updated['12_section_409a'],
                        'topmostSubform[0].Copy2[0].RightColumn[0].TagCorrectingSubform[0].c2_3[0]' => $updated['13_fatca_filing'], //on-off
                        'topmostSubform[0].Copy2[0].RightColumn[0].Box14_ReadOrder[0].f2_20[0]' => $updated['14_excess_golden'],
                        'topmostSubform[0].Copy2[0].RightColumn[0].f2_21[0]' => $updated['15_nonqualified_deferred'],
                        'topmostSubform[0].Copy2[0].Box16_ReadOrder[0].f2_22[0]' => $updated['16_state_tax'],
                        'topmostSubform[0].Copy2[0].Box16_ReadOrder[0].f2_23[0]' => $updated['16_state_tax_2'],
                        'topmostSubform[0].Copy2[0].Box17_ReadOrder[0].f2_24[0]' => $updated['17_state_payers_state'],
                        'topmostSubform[0].Copy2[0].Box17_ReadOrder[0].f2_25[0]' => $updated['17_state_payers_state_2'],
                        'topmostSubform[0].Copy2[0].f2_26[0]' => $updated['18_state_income'],
                        'topmostSubform[0].Copy2[0].f2_27[0]' => $updated['18_state_income_2'],

                        'topmostSubform[0].CopyC[0].CopyCHeader[0].CalendarYear[0].f2_1[0]' => '23', //year
                        'topmostSubform[0].CopyC[0].LeftColumn[0].f2_2[0]' => $updated['payer_info'],
                        'topmostSubform[0].CopyC[0].LeftColumn[0].f2_3[0]' => $updated['payer_tin'],
                        'topmostSubform[0].CopyC[0].LeftColumn[0].f2_4[0]' => $updated['recipient_tin'],
                        'topmostSubform[0].CopyC[0].LeftColumn[0].f2_5[0]' => $updated['recipient_name'],
                        'topmostSubform[0].CopyC[0].LeftColumn[0].f2_6[0]' => $updated['street_address'],
                        'topmostSubform[0].CopyC[0].LeftColumn[0].f2_7[0]' => $updated['city_town'],
                        'topmostSubform[0].CopyC[0].LeftColumn[0].f2_8[0]' => $updated['account_number'],
                        'topmostSubform[0].CopyC[0].RightColumn[0].f2_9[0]' => $updated['1_rents'],
                        'topmostSubform[0].CopyC[0].RightColumn[0].f2_10[0]' => $updated['2_royalties'],
                        'topmostSubform[0].CopyC[0].RightColumn[0].f2_11[0]' => $updated['3_other_income'],
                        'topmostSubform[0].CopyC[0].RightColumn[0].f2_12[0]' => $updated['4_federal_income'],
                        'topmostSubform[0].CopyC[0].RightColumn[0].f2_13[0]' => $updated['5_fishing_boat'],
                        'topmostSubform[0].CopyC[0].RightColumn[0].f2_14[0]' => $updated['6_medical_health'],
                        'topmostSubform[0].CopyC[0].RightColumn[0].c2_4[0]' => $updated['7_payer_direct'],
                        'topmostSubform[0].CopyC[0].RightColumn[0].f2_15[0]' => $updated['8_substitute_payments'],
                        'topmostSubform[0].CopyC[0].RightColumn[0].f2_16[0]' => $updated['9_crop_insurance'],
                        'topmostSubform[0].CopyC[0].RightColumn[0].f2_17[0]' => $updated['10_gross_proceeds'],
                        'topmostSubform[0].CopyC[0].RightColumn[0].f2_18[0]' => $updated['11_fish_purchased'],
                        'topmostSubform[0].CopyC[0].RightColumn[0].f2_19[0]' => $updated['12_section_409a'],
                        'topmostSubform[0].CopyC[0].RightColumn[0].TagCorrectingSubform[0].c2_3[0]' => $updated['13_fatca_filing'], //on-off
                        'topmostSubform[0].CopyC[0].RightColumn[0].Box14_ReadOrder[0].f2_20[0]' => $updated['14_excess_golden'],
                        'topmostSubform[0].CopyC[0].RightColumn[0].f2_21[0]' => $updated['15_nonqualified_deferred'],
                        'topmostSubform[0].CopyC[0].Box16_ReadOrder[0].f2_22[0]' => $updated['16_state_tax'],
                        'topmostSubform[0].CopyC[0].Box16_ReadOrder[0].f2_23[0]' => $updated['16_state_tax_2'],
                        'topmostSubform[0].CopyC[0].Box17_ReadOrder[0].f2_24[0]' => $updated['17_state_payers_state'],
                        'topmostSubform[0].CopyC[0].Box17_ReadOrder[0].f2_25[0]' => $updated['17_state_payers_state_2'],
                        'topmostSubform[0].CopyC[0].f2_26[0]' => $updated['18_state_income'],
                        'topmostSubform[0].CopyC[0].f2_27[0]' => $updated['18_state_income_2'],
                        'topmostSubform[0].CopyC[0].c2_2[0]' => $updated['2nd_tin_not']
                    ])
                    ->flatten()
                    ->send('f1099msc.pdf');

                    // $templateProcessor = new \PhpOffice\PhpWord\TemplateProcessor($this->base_path . '/src/Modules/Users/taxes/1099-template.docx');

                    // $templateProcessor->setValue('${y}', '23');
                    // $templateProcessor->setValue('${payer-info}', $updated['payer_info']);
                    // $templateProcessor->setValue('${payer-tin}', $updated['payer_tin']);
                    // $templateProcessor->setValue('${recipient-tin}', $updated['recipient_tin']);
                    // $templateProcessor->setValue('${recipient-name}', $updated['recipient_name']);
                    // $templateProcessor->setValue('${recipient-address}', $updated['street_address']);
                    // $templateProcessor->setValue('${recipient-city}', $updated['city_town']);
                    // $templateProcessor->setValue('${account-nr}', $updated['account_number']);
                    // $templateProcessor->setValue('${tn-n}', ($updated['2nd_tin_not'])) ? 'X':'';
                    // $templateProcessor->setValue('${1}', $updated['1_rents']);
                    // $templateProcessor->setValue('${2}', $updated['2_royalties']);
                    // $templateProcessor->setValue('${3}', $updated['3_other_income']);
                    // $templateProcessor->setValue('${4}', $updated['4_federal_income']);
                    // $templateProcessor->setValue('${5}', $updated['5_fishing_boat']);
                    // $templateProcessor->setValue('${6}', $updated['6_medical_health']);
                    // $templateProcessor->setValue('${7}', ($updated['7_payer_direct']) ? 'X' : '');
                    // $templateProcessor->setValue('${8}', $updated['8_substitute_payments']);
                    // $templateProcessor->setValue('${9}', $updated['9_crop_insurance']);
                    // $templateProcessor->setValue('${10}', $updated['10_gross_proceeds']);
                    // $templateProcessor->setValue('${11}', $updated['11_fish_purchased']);
                    // $templateProcessor->setValue('${12}', $updated['12_section_409a']);
                    // $templateProcessor->setValue('${13}', ($updated['13_fatca_filing']) ? 'X' : '');
                    // $templateProcessor->setValue('${14}', $updated['14_excess_golden']);
                    // $templateProcessor->setValue('${15}', $updated['15_nonqualified_deferred']);
                    // $templateProcessor->setValue('${16}', $updated['16_state_tax']);
                    // $templateProcessor->setValue('${16-2}', $updated['16_state_tax_2']);
                    // $templateProcessor->setValue('${17}', $updated['17_state_payers_state']);
                    // $templateProcessor->setValue('${17-2}', $updated['17_state_payers_state_2']);
                    // $templateProcessor->setValue('${18}', $updated['18_state_income']);
                    // $templateProcessor->setValue('${18-2}', $updated['18_state_income_2']);

                    
                    // $templateProcessor->saveAs($this->base_path . '/src/Modules/Users/taxes/downloadable.docx');
                }
            }

            //redirect to /taxes/
        }
    }

    public function updateDownloadContract(){
        $user_id = $_POST['user_id'];
        if($user_id){
            $user = UserModel::getById($user_id);
            if($user){
                $user_oldest_contract = UserModel::getOldestContract($user_id);
                $sign_date = date('m-d-Y');
                if($user_oldest_contract){
                    $sign_date = date('m-d-Y', strtotime($user_oldest_contract['sign_date']));
                }
                $data = array(
                    'signature' => $_POST['agent_sign'],
                    'sign_ip' => $_SERVER['REMOTE_ADDR'],
                    'sign_user_agent' => isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : '',
                    'sign_date' => $sign_date,
                    'user_name' => $user['first_name'] . ' ' . $user['last_name'],
                    'contract_duration' => "2 years" //$_POST['contract_duration']
                );

                $result = UserModel::updateContract($user_id, $data);
                if($result['success']){
                    $data = $result['data'];

                    $this->session->set('is_user_fully_registered', 1);
                    $_SESSION['is_user_fully_registered'] = 1;
                    if($user['role'] == 5 || $user['role'] == 1){
                        $templateProcessor = new \PhpOffice\PhpWord\TemplateProcessor($this->base_path . '/src/Modules/Users/project-manager.docx');
                    }else if($user['role'] == 6 || $user['role'] == 99){
                        $templateProcessor = new \PhpOffice\PhpWord\TemplateProcessor($this->base_path . '/src/Modules/Users/sales-agent.docx');
                    }else if($user['role'] == 11){
                        $templateProcessor = new \PhpOffice\PhpWord\TemplateProcessor($this->base_path . '/src/Modules/Users/content-creator.docx');
                    }

                    $templateProcessor->setValue('${user-name}', $data['user_name']);
                    $templateProcessor->setValue('${date}', $data['sign_date']);
                    $templateProcessor->setValue('${ip}', $data['sign_ip']);
                    $templateProcessor->setValue('${device}', $data['sign_user_agent']);
                    // $templateProcessor->setValue('${contract-duration}', $data['contract_duration']);

                    $signature = $data['signature'];
                    list($type, $signature) = explode(';', $signature);
                    list(, $signature)      = explode(',', $signature);
                    $signature = base64_decode($signature);

                    file_put_contents(__DIR__ . '/../tmp/image.png', $signature);

                    $templateProcessor->setImageValue('sign', array('path' => __DIR__ . '/../tmp/image.png', 'width' => 200, 'height' => 100));
                    $templateProcessor->setImageValue('sign_se7entech', array('path' => __DIR__ . '/../tmp/se7entech-sign.jpeg', 'width' => 200, 'height' => 100));

                    $rnd_name = rand(0, 10000);
                    $filename = $this->base_path . '/src/Modules/Users/tmp/downloadable'.$rnd_name.'.docx';
                    
                    $templateProcessor->saveAs($filename);

                    header('Content-Description: File Transfer');
                    header('Content-Type: application/octet-stream');
                    header('Content-Disposition: attachment; filename=Contract.docx');
                    header('Content-Transfer-Encoding: binary');
                    header('Expires: 0');
                    header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
                    header('Pragma: public');
                    header('Content-Length: ' . filesize($filename));
                    flush();
                    readfile($filename);
                    unlink($filename); // deletes the temporary file
                    exit;

                    // // Make sure you have `dompdf/dompdf` in your composer dependencies.
                    // Settings::setPdfRendererName(Settings::PDF_RENDERER_DOMPDF);
                    // // Any writable directory here. It will be ignored.
                    // Settings::setPdfRendererPath('.');

                    // $phpWord = IOFactory::load($this->base_path . '/src/Modules/Users/tmp/downloadable.docx', 'Word2007');
                    // $phpWord->save($this->base_path . '/src/Modules/Users/tmp/document.pdf', 'PDF');

                    //Load temp file
                    // $phpWord = \PhpOffice\PhpWord\IOFactory::load($this->base_path . '/src/Modules/Users/tmp/downloadable.docx'); 

                    // //Save it
                    // $xmlWriter = \PhpOffice\PhpWord\IOFactory::createWriter($phpWord , 'PDF');
                    // $xmlWriter->save($this->base_path . '/src/Modules/Users/tmp/document.pdf');  
                    
                }
                // echo var_dump($result);

            }
        }
    }
}
